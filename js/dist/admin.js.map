{"version":3,"sources":["webpack://@itlad/synopsis/webpack/bootstrap","webpack://@itlad/synopsis/external \"flarum.core.compat['app']\"","webpack://@itlad/synopsis/./src/admin/index.js"],"names":["enumerable","get","getter","value","key","bind","module","Object","prototype","hasOwnProperty","call","object","property","exports","flarum","core","compat","app","initializers","add","extensionData","registerSetting","label","translator","trans","setting","type","options","reduce","o"],"mappings":"2BACA,SAGA,cAGA,QACA,oBAGA,YACA,IACA,KACA,YAUA,OANA,mCAGA,OAGA,UA0DA,OArDA,MAGA,MAGA,oBACA,UACA,2BAA2CA,YAAY,EAAMC,IAAKC,KAKlE,gBACA,gDACA,4CAAyDC,MAAO,WAEhE,sCAAkDA,OAAO,KAQzD,kBAEA,GADA,cACA,aACA,qDACA,0BAGA,GAFA,OACA,mCAA0CH,YAAY,EAAMG,MAAOA,IACnE,2DAAiH,OAAOA,EAAMC,IAAQC,KAAK,KAAMD,IACjJ,UAIA,gBACA,sBACA,WAA4B,OAAOE,EAAgB,SACnD,WAAkC,OAAOA,GAEzC,OADA,aACA,GAIA,kBAAuD,OAAOC,OAAOC,UAAUC,eAAeC,KAAKC,EAAQC,IAG3G,OAIA,U,kBClFAN,EAAOO,QAAUC,OAAOC,KAAKC,OAAY,K,2DC0BzCC,IAAIC,aAAaC,IAAI,kBAAkB,WACnCF,IAAIG,cAAJ,IACS,kBACJC,gBAAgB,CACbC,MAAOL,IAAIM,WAAWC,MAAM,+CAC5BC,QAAS,gCACTC,KAAM,WAETL,gBAAgB,CACbC,MAAOL,IAAIM,WAAWC,MAAM,uDAC5BC,QAAS,uCACTC,KAAM,YAETL,gBAAgB,CACbC,MAAOL,IAAIM,WAAWC,MAAM,uDAC5BC,QAAS,uCACTC,KAAM,WAETL,gBAAgB,CACbC,MAAOL,IAAIM,WAAWC,MAAM,+CAC5BC,QAAS,+BACTC,KAAM,YAETL,gBAAgB,CACbC,MAAOL,IAAIM,WAAWC,MAAM,8CAC5BC,QAAS,8BACTE,QAlCD,CAAC,QAAS,QAAQC,QAAO,SAACC,EAAGzB,GAGhC,OAFAyB,EAAEzB,GAAOa,IAAIM,WAAWC,MAAf,iCAAsDpB,EAAtD,UAEFyB,IACR,IA+BKH,KAAM","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","module.exports = flarum.core.compat['app'];","/* This is part of the itlad/synopsis project.\n *\n * Additional modifications (c)2021 itlad\n *\n * Additional modifications (c)2020 Ian Morland\n *\n * Modified code (c)2019 Jordan Schnaidt\n *\n * Original code (c) Toby Zerner <toby.zerner@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport app from 'flarum/app';\n\nfunction typeOptions() {\n    let opts;\n    opts = ['first', 'last'].reduce((o, key) => {\n        o[key] = app.translator.trans(`itlad-synopsis.admin.settings.${key}-label`);\n\n        return o;\n    }, {});\n    return opts;\n}\n\napp.initializers.add('itlad-synopsis', () => {\n    app.extensionData\n        .for('itlad-synopsis')\n        .registerSetting({\n            label: app.translator.trans('itlad-synopsis.admin.settings.excerpt-label'),\n            setting: 'itlad-synopsis.excerpt_length',\n            type: 'number',\n        })\n        .registerSetting({\n            label: app.translator.trans('itlad-synopsis.admin.settings.images-excerpt-enable'),\n            setting: 'itlad-synopsis.images-excerpt_enable',\n            type: 'boolean',\n        })\n        .registerSetting({\n            label: app.translator.trans('itlad-synopsis.admin.settings.images-excerpt-length'),\n            setting: 'itlad-synopsis.images-excerpt_length',\n            type: 'number',\n        })\n        .registerSetting({\n            label: app.translator.trans('itlad-synopsis.admin.settings.rich-excerpts'),\n            setting: 'itlad-synopsis.rich-excerpts',\n            type: 'boolean',\n        })\n        .registerSetting({\n            label: app.translator.trans('itlad-synopsis.admin.settings.excerpt-type'),\n            setting: 'itlad-synopsis.excerpt-type',\n            options: typeOptions(),\n            type: 'select',\n        });\n});\n"],"sourceRoot":""}